{"version":3,"sources":["Levels.js","App.js","Question.js","serviceWorker.js","index.js"],"names":["App","className","type","id","obj","require","Question","props","state","value","handleChange","bind","event","this","setState","target","document","getElementById","addEventListener","preventDefault","keyCode","click","getQuestion","questionNum","output","individualClue","split","i","length","push","key","renderQuestion","onClick","location","reload","disabled","placeholder","onChange","innerHTML","nextLevelBtn","removeAttribute","setAttribute","console","log","React","Component","newButtons","Levels","forEach","element","onclick","ReactDOM","render","StrictMode","Boolean","window","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.00551e25.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Levels.css';\r\nimport Question from './Question';\r\nimport './Questions.json';\r\n\r\nvar newButtons = [];\r\nfor (var i=1; i<101; i++) {\r\n    newButtons.push(<button key={i} type=\"button\" id={i}>{i}</button>);\r\n}\r\n\r\nclass Levels extends React.Component {\r\n    componentDidMount() {\r\n        newButtons.forEach(function (element)  {\r\n            document.getElementById(element.props.id).onclick = function () {\r\n                return ReactDOM.render(<React.StrictMode><Question questionNum={element.props.id} /></React.StrictMode>, document.getElementById('root'));\r\n            }\r\n        })\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"levels\">\r\n                <div className=\"container\">\r\n                    <div className=\"buttonQuestions\">\r\n                        <h1>Levels</h1>\r\n                        <div className=\"buttons\">\r\n                            <button type=\"button\" className=\"leftArrow\" onClick={() => document.location.reload()}>&larr;</button>\r\n                            {newButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Levels;","import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"home\">  \n          <h1>Math Riddles Online</h1>\n          <button type=\"button\" id=\"play\">Play</button>\n          <button type=\"button\" id=\"levels\">Levels</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Question.css';\r\nvar obj = require(\"./Questions.json\");\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {value: \"\"}\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        this.setState({value: event.target.value});\r\n    }\r\n    componentDidMount () {\r\n        document.getElementById(\"ans\").addEventListener(\"keyup\", function(event) {\r\n            event.preventDefault();\r\n            if (event.keyCode === 13) {\r\n                document.getElementById(\"ansSubmit\").click();\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        var getQuestion = obj[\"question\"+this.props.questionNum];\r\n        var output = [];\r\n        function renderQuestion() {\r\n            var individualClue = getQuestion.split(\"\\n\");\r\n            for (var i=0; i<individualClue.length; i++) {\r\n                output.push(<h3 key={i}>{individualClue[i]}</h3>);\r\n            }\r\n        }\r\n        renderQuestion();\r\n        return (\r\n            <div className=\"display\">\r\n                <button type=\"button\" id=\"leftArrow\" onClick={() => document.location.reload()}>&larr;</button>\r\n                <button type=\"button\" id=\"rightArrow\" disabled={true}>&rarr;</button>\r\n                <div className=\"container\">\r\n                    <div className=\"question\">\r\n                        <h1>Level {this.props.questionNum}</h1>\r\n                        {output}\r\n                        <input type=\"text\" id=\"ans\" placeholder=\"Answer\" onChange={this.handleChange}></input>\r\n                        <button type=\"submit\" id=\"ansSubmit\" onClick={() => {\r\n                            var value = this.state.value;\r\n                            if (value !== obj[\"ans\"+this.props.questionNum]) {\r\n                                document.getElementById(\"CorI\").innerHTML = \"Incorrect! Try again.\";\r\n                            }\r\n                            else {\r\n                                document.getElementById(\"CorI\").innerHTML = \"Correct!\";\r\n                                // document.cookie = `solved${this.props.questionNum}=true`;\r\n                                var nextLevelBtn = document.getElementById(\"rightArrow\");\r\n                                nextLevelBtn.removeAttribute(\"disabled\");\r\n                                nextLevelBtn.setAttribute(\"onclick\", console.log(\"Hello\"));\r\n                            }\r\n                        }}>&uarr;</button>\r\n                    </div>\r\n                    <h3 id=\"CorI\"></h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Levels from './Levels';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\ndocument.getElementById(\"levels\").onclick = function() {\n  ReactDOM.render(<React.StrictMode><Levels /></React.StrictMode>, document.getElementById(\"root\"));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}