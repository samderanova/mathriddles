{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samde\\\\Documents\\\\Sam\\\\Code\\\\MathRiddles\\\\mathriddles\\\\src\\\\Levels.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Levels.css';\nimport Question from './Question';\nimport './Questions.json';\n\nvar cryptoJS = require('crypto-js'); //create buttons labeled from 1 to 100 and stores them in an array\n\n\nvar newButtons = [];\nnewButtons.push( /*#__PURE__*/React.createElement(\"button\", {\n  key: 1,\n  type: \"button\",\n  id: 1,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 17\n  }\n}, \"1\"));\n\nfor (var i = 2; i < 61; i++) {\n  newButtons.push( /*#__PURE__*/React.createElement(\"button\", {\n    key: i,\n    type: \"button\",\n    id: i,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 21\n    }\n  }, i));\n}\n\nclass Levels extends React.Component {\n  componentDidMount() {\n    //check cookies to see if a level has been solved\n    var cookies = document.cookie;\n    var cookieArray = cookies.split(\";\");\n    var solvedClues = [];\n\n    for (var cookie of cookieArray) {\n      var decryptedCookie = crypto.AES.decrypt(cookie, \"cookieEncode\").toString(crypto.enc.Utf8);\n      var isSolvedCookie = parseInt(decryptedCookie);\n      if (isSolvedCookie) solvedClues.push(isSolvedCookie);\n    }\n\n    for (var i = 1; i <= solvedClues.length; i++) {\n      /* all buttons except the first level have been disbled; removes disabled attribute for those that have been solved\r\n      plus the one directly afterwards that has not been solved yet*/\n      document.getElementById(i).removeAttribute(\"disabled\");\n    } //renders the level to the page\n\n\n    newButtons.forEach(function (element) {\n      document.getElementById(element.props.id).onclick = function () {\n        return ReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 40\n          }\n        }, /*#__PURE__*/React.createElement(Question, {\n          questionNum: element.props.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 58\n          }\n        })), document.getElementById('root'));\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"levels\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttonQuestions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, \"Levels\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"leftArrow\",\n      onClick: () => document.location.reload(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }\n    }, \"\\u2190\"), newButtons))));\n  }\n\n}\n\nexport default Levels;","map":{"version":3,"sources":["C:/Users/samde/Documents/Sam/Code/MathRiddles/mathriddles/src/Levels.js"],"names":["React","ReactDOM","Question","cryptoJS","require","newButtons","push","i","Levels","Component","componentDidMount","cookies","document","cookie","cookieArray","split","solvedClues","decryptedCookie","crypto","AES","decrypt","toString","enc","Utf8","isSolvedCookie","parseInt","length","getElementById","removeAttribute","forEach","element","props","id","onclick","render","location","reload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,kBAAP;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB,C,CAEA;;;AACA,IAAIC,UAAU,GAAG,EAAjB;AACAA,UAAU,CAACC,IAAX,eAAgB;AAAQ,EAAA,GAAG,EAAE,CAAb;AAAgB,EAAA,IAAI,EAAC,QAArB;AAA8B,EAAA,EAAE,EAAE,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;;AACA,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,EAAhB,EAAoBA,CAAC,EAArB,EAAyB;AACrBF,EAAAA,UAAU,CAACC,IAAX,eAAgB;AAAQ,IAAA,GAAG,EAAEC,CAAb;AAAgB,IAAA,IAAI,EAAC,QAArB;AAA8B,IAAA,EAAE,EAAEA,CAAlC;AAAqC,IAAA,QAAQ,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CA,CAA/C,CAAhB;AACH;;AAED,MAAMC,MAAN,SAAqBR,KAAK,CAACS,SAA3B,CAAqC;AACjCC,EAAAA,iBAAiB,GAAG;AAChB;AACA,QAAIC,OAAO,GAAGC,QAAQ,CAACC,MAAvB;AACA,QAAIC,WAAW,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,CAAlB;AACA,QAAIC,WAAW,GAAG,EAAlB;;AACA,SAAK,IAAIH,MAAT,IAAmBC,WAAnB,EAAgC;AAC5B,UAAIG,eAAe,GAAGC,MAAM,CAACC,GAAP,CAAWC,OAAX,CAAmBP,MAAnB,EAA2B,cAA3B,EAA2CQ,QAA3C,CAAoDH,MAAM,CAACI,GAAP,CAAWC,IAA/D,CAAtB;AACA,UAAIC,cAAc,GAAGC,QAAQ,CAACR,eAAD,CAA7B;AACA,UAAIO,cAAJ,EAAoBR,WAAW,CAACV,IAAZ,CAAiBkB,cAAjB;AACvB;;AACD,SAAK,IAAIjB,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAES,WAAW,CAACU,MAA7B,EAAqCnB,CAAC,EAAtC,EAA0C;AACtC;;AAEAK,MAAAA,QAAQ,CAACe,cAAT,CAAwBpB,CAAxB,EAA2BqB,eAA3B,CAA2C,UAA3C;AACH,KAde,CAgBhB;;;AACAvB,IAAAA,UAAU,CAACwB,OAAX,CAAmB,UAAUC,OAAV,EAAoB;AACnClB,MAAAA,QAAQ,CAACe,cAAT,CAAwBG,OAAO,CAACC,KAAR,CAAcC,EAAtC,EAA0CC,OAA1C,GAAoD,YAAY;AAC5D,eAAOhC,QAAQ,CAACiC,MAAT,eAAgB,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAkB,oBAAC,QAAD;AAAU,UAAA,WAAW,EAAEJ,OAAO,CAACC,KAAR,CAAcC,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAlB,CAAhB,EAAkGpB,QAAQ,CAACe,cAAT,CAAwB,MAAxB,CAAlG,CAAP;AACH,OAFD;AAGH,KAJD;AAKH;;AACDO,EAAAA,MAAM,GAAI;AACN,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,WAAhC;AAA4C,MAAA,OAAO,EAAE,MAAMtB,QAAQ,CAACuB,QAAT,CAAkBC,MAAlB,EAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEK/B,UAFL,CAFJ,CADJ,CADJ,CADJ;AAaH;;AAtCgC;;AAyCrC,eAAeG,MAAf","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Levels.css';\r\nimport Question from './Question';\r\nimport './Questions.json';\r\nvar cryptoJS = require('crypto-js');\r\n\r\n//create buttons labeled from 1 to 100 and stores them in an array\r\nvar newButtons = [];\r\nnewButtons.push(<button key={1} type=\"button\" id={1}>1</button>)\r\nfor (var i=2; i<61; i++) {\r\n    newButtons.push(<button key={i} type=\"button\" id={i} disabled>{i}</button>);\r\n}\r\n\r\nclass Levels extends React.Component {\r\n    componentDidMount() {\r\n        //check cookies to see if a level has been solved\r\n        var cookies = document.cookie;\r\n        var cookieArray = cookies.split(\";\");\r\n        var solvedClues = [];\r\n        for (var cookie of cookieArray) {\r\n            var decryptedCookie = crypto.AES.decrypt(cookie, \"cookieEncode\").toString(crypto.enc.Utf8);\r\n            var isSolvedCookie = parseInt(decryptedCookie);\r\n            if (isSolvedCookie) solvedClues.push(isSolvedCookie);\r\n        }\r\n        for (var i=1; i<=solvedClues.length; i++) {\r\n            /* all buttons except the first level have been disbled; removes disabled attribute for those that have been solved\r\n            plus the one directly afterwards that has not been solved yet*/\r\n            document.getElementById(i).removeAttribute(\"disabled\"); \r\n        }\r\n\r\n        //renders the level to the page\r\n        newButtons.forEach(function (element)  {\r\n            document.getElementById(element.props.id).onclick = function () {\r\n                return ReactDOM.render(<React.StrictMode><Question questionNum={element.props.id} /></React.StrictMode>, document.getElementById('root'));\r\n            }\r\n        })\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"levels\">\r\n                <div className=\"container\">\r\n                    <div className=\"buttonQuestions\">\r\n                        <h1>Levels</h1>\r\n                        <div className=\"buttons\">\r\n                            <button type=\"button\" className=\"leftArrow\" onClick={() => document.location.reload()}>&larr;</button>\r\n                            {newButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Levels;"]},"metadata":{},"sourceType":"module"}