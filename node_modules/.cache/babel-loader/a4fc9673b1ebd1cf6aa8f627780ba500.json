{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sam\\\\Documents\\\\Sam\\\\Code\\\\MathRiddles\\\\mathriddles\\\\src\\\\Question.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Question.css';\n\nvar obj = require(\"./Questions.json\");\n\nclass Question extends React.Component {\n  constructor(props) {\n    super(props); // the onload value of the input text box is \"\"\n\n    this.state = {\n      value: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    // simultaneously sets state as the user is typing in the text box\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    // when a user clicks enter, their answer is submitted\n    document.getElementById(\"ans\").addEventListener(\"keyup\", function (event) {\n      event.preventDefault();\n      if (event.keyCode === 13) document.getElementById(\"ansSubmit\").click();\n    });\n  }\n\n  render() {\n    var nextLevelBtn = document.getElementById(\"rightArrow\"); // get questions from Questions.json according to the props passed into <Question questionNum = {props} />\n\n    var questionNum = this.props.questionNum;\n    var getQuestion = obj[\"question\" + questionNum]; // renders each individual line of the clue separated by the \\n's from the JSON\n\n    var output = [];\n\n    function renderQuestion() {\n      var individualClue = getQuestion.split(\"\\n\");\n\n      if (questionNum === 13) {\n        var regex = /a/gi,\n            regex2 = /b/gi;\n        getQuestion.replace(regex, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 44\n          }\n        }, \"\\u25B3\"));\n        getQuestion.replace(regex2, /*#__PURE__*/React.createElement(\"h3\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 45\n          }\n        }, \"\\u25C7\"));\n      }\n\n      for (var i = 0; i < individualClue.length; i++) {\n        output.push( /*#__PURE__*/React.createElement(\"h3\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 29\n          }\n        }, individualClue[i]));\n      }\n    }\n\n    renderQuestion(); // when the left arrow is clilcked, render  previous level; if there is none, reload the homepage\n\n    function renderPreviousLevel() {\n      if (questionNum === 1) document.location.reload();else ReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 34\n        }\n      }, /*#__PURE__*/React.createElement(Question, {\n        questionNum: questionNum - 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 52\n        }\n      })), document.getElementById(\"root\"));\n    }\n    /* after the level is solved, when the right arrow is clicked, render next clue, clear the correct/incorrect text\r\n    and input value*/\n\n\n    function renderNewLevel() {\n      ReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Question, {\n        questionNum: questionNum + 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 47\n        }\n      })), document.getElementById(\"root\"));\n      document.getElementById(\"CorI\").innerHTML = \"\";\n      document.getElementById(\"ans\").value = \"\";\n      nextLevelBtn.onclick = null;\n      nextLevelBtn.setAttribute(\"class\", \"\");\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      id: \"leftArrow\",\n      onClick: renderPreviousLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"\\u2190\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      id: \"rightArrow\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, \"\\u2192\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, \"Level \", questionNum), output, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"ans\",\n      placeholder: \"Answer\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"ansSubmit\",\n      onClick: _ => {\n        var value = this.state.value;\n        var noCommaValue = \"\"; // if a comma is present in the input, remove it and store it in noCommaValue\n\n        if (value.includes(\",\")) {\n          var splitNumber = value.split(\",\");\n\n          for (var number of splitNumber) {\n            noCommaValue += number;\n          }\n\n          noCommaValue = Number(noCommaValue);\n        } else noCommaValue = Number(value); // if noCommaValue is not a number or if it's the wrong answer, prompt user to try again\n\n\n        if (isNaN(noCommaValue)) document.getElementById(\"CorI\").innerHTML = \"Not a valid response! Try again.\";else if (noCommaValue !== obj[\"ans\" + questionNum]) {\n          document.getElementById(\"CorI\").innerHTML = \"Incorrect! Try again.\";\n        } else {\n          /* add html to notify user that answer is correct, set cookie saying that the level is solved,\r\n          make the right arrow active, */\n          document.getElementById(\"CorI\").innerHTML = \"Correct! Press the \\\"space\\\" key to Head to the next level.\";\n          document.cookie = `${this.props.questionNum}=true`;\n          nextLevelBtn.setAttribute(\"class\", \"active\");\n\n          nextLevelBtn.onclick = function () {\n            renderNewLevel();\n          };\n\n          document.body.onkeyup = function (event) {\n            event.preventDefault();\n            if (event.keyCode === 32) nextLevelBtn.click();\n          };\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, \"\\u2191\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"CorI\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default Question;","map":{"version":3,"sources":["C:/Users/Sam/Documents/Sam/Code/MathRiddles/mathriddles/src/Question.js"],"names":["React","ReactDOM","obj","require","Question","Component","constructor","props","state","value","handleChange","bind","event","setState","target","componentDidMount","document","getElementById","addEventListener","preventDefault","keyCode","click","render","nextLevelBtn","questionNum","getQuestion","output","renderQuestion","individualClue","split","regex","regex2","replace","i","length","push","renderPreviousLevel","location","reload","renderNewLevel","innerHTML","onclick","setAttribute","_","noCommaValue","includes","splitNumber","number","Number","isNaN","cookie","body","onkeyup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Question.css';\r\nvar obj = require(\"./Questions.json\");\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // the onload value of the input text box is \"\"\r\n        this.state = {value: \"\"}\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        // simultaneously sets state as the user is typing in the text box\r\n        this.setState({value: event.target.value});\r\n    }\r\n    componentDidMount () {\r\n        // when a user clicks enter, their answer is submitted\r\n        document.getElementById(\"ans\").addEventListener(\"keyup\", function(event) {\r\n            event.preventDefault();\r\n            if (event.keyCode === 13) document.getElementById(\"ansSubmit\").click();\r\n        });\r\n    }\r\n    render() {\r\n        var nextLevelBtn = document.getElementById(\"rightArrow\");\r\n        \r\n        // get questions from Questions.json according to the props passed into <Question questionNum = {props} />\r\n        var questionNum = this.props.questionNum;\r\n        var getQuestion = obj[\"question\"+questionNum];\r\n        \r\n        // renders each individual line of the clue separated by the \\n's from the JSON\r\n        var output = [];\r\n        function renderQuestion() {\r\n            var individualClue = getQuestion.split(\"\\n\");\r\n            if (questionNum === 13) {\r\n                var regex = /a/gi, regex2 = /b/gi;\r\n                getQuestion.replace(regex, <h3>&#9651;</h3>);\r\n                getQuestion.replace(regex2, <h3>&#9671;</h3>)\r\n            }\r\n            for (var i=0; i<individualClue.length; i++) {\r\n                output.push(<h3 key={i}>{individualClue[i]}</h3>);\r\n            }\r\n        }\r\n        renderQuestion();\r\n\r\n        // when the left arrow is clilcked, render  previous level; if there is none, reload the homepage\r\n        function renderPreviousLevel() {\r\n            if (questionNum === 1) document.location.reload()\r\n            else ReactDOM.render(<React.StrictMode><Question questionNum={questionNum-1} /></React.StrictMode>, document.getElementById(\"root\"))\r\n        }\r\n\r\n        /* after the level is solved, when the right arrow is clicked, render next clue, clear the correct/incorrect text\r\n        and input value*/\r\n        function renderNewLevel() {\r\n            ReactDOM.render(<React.StrictMode><Question questionNum={questionNum+1} /></React.StrictMode>, document.getElementById(\"root\"));\r\n            document.getElementById(\"CorI\").innerHTML = \"\";\r\n            document.getElementById(\"ans\").value = \"\";\r\n            nextLevelBtn.onclick = null;\r\n            nextLevelBtn.setAttribute(\"class\", \"\");\r\n        }\r\n        return (\r\n            <div className=\"display\">\r\n                <button type=\"button\" id=\"leftArrow\" onClick={renderPreviousLevel}>&larr;</button>\r\n                <button type=\"button\" id=\"rightArrow\">&rarr;</button>\r\n                <div className=\"container\">\r\n                    <div className=\"question\">\r\n                        <h1>Level {questionNum}</h1>\r\n                        {output}\r\n                        <input type=\"text\" id=\"ans\" placeholder=\"Answer\" onChange={this.handleChange}></input>\r\n                        <button type=\"submit\" id=\"ansSubmit\" onClick={_ => {\r\n                            var value = this.state.value;\r\n                            var noCommaValue = \"\";\r\n\r\n                            // if a comma is present in the input, remove it and store it in noCommaValue\r\n                            if (value.includes(\",\")) {\r\n                                var splitNumber = value.split(\",\");\r\n                                for (var number of splitNumber) { noCommaValue += number; }\r\n                                noCommaValue = Number(noCommaValue);\r\n                            }\r\n                            else noCommaValue = Number(value);\r\n\r\n                            // if noCommaValue is not a number or if it's the wrong answer, prompt user to try again\r\n                            if (isNaN(noCommaValue)) document.getElementById(\"CorI\").innerHTML = \"Not a valid response! Try again.\"\r\n                            else if (noCommaValue !== obj[\"ans\"+questionNum]) {\r\n                                document.getElementById(\"CorI\").innerHTML = \"Incorrect! Try again.\";\r\n                            }\r\n                            else {\r\n                                /* add html to notify user that answer is correct, set cookie saying that the level is solved,\r\n                                make the right arrow active, */\r\n                                document.getElementById(\"CorI\").innerHTML = \"Correct! Press the \\\"space\\\" key to Head to the next level.\";\r\n                                document.cookie = `${this.props.questionNum}=true`;\r\n                                nextLevelBtn.setAttribute(\"class\", \"active\");\r\n                                nextLevelBtn.onclick = function () { renderNewLevel() }\r\n                                document.body.onkeyup = function(event) {\r\n                                    event.preventDefault();\r\n                                    if (event.keyCode === 32) nextLevelBtn.click();\r\n                                };\r\n                            }\r\n                        }}>&uarr;</button>\r\n                        <p id=\"CorI\"></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;"]},"metadata":{},"sourceType":"module"}