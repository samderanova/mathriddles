{"version":3,"sources":["App.js","Levels.js","Question.js","How2Play.js","serviceWorker.js","index.js"],"names":["App","className","type","id","newButtons","push","key","i","disabled","Levels","cookieArray","document","cookie","split","solvedClues","parseInt","length","getElementById","removeAttribute","forEach","element","props","onclick","ReactDOM","render","StrictMode","questionNum","onClick","location","reload","React","Component","obj","require","Question","state","value","handleChange","bind","event","this","setState","target","addEventListener","preventDefault","keyCode","click","nextLevelBtn","output","individualClue","renderQuestion","_","placeholder","onChange","noCommaValue","includes","splitNumber","Number","isNaN","innerHTML","setAttribute","body","onkeyup","How2Play","Boolean","window","hostname","match","cookies","lastClueSolved","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82feb078.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"home\">  \n          <h1>Math Riddles Online</h1>\n          <button type=\"button\" id=\"play\">Play</button>\n          <button type=\"button\" id=\"levels\">Levels</button>\n          <h3>IMPORTANT: This game relies on cookies to track progress. Clearing them will therefore clear your own progress!</h3>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Levels.css';\r\nimport Question from './Question';\r\nimport './Questions.json';\r\n\r\n\r\n//create buttons labeled from 1 to 100 and stores them in an array\r\nvar newButtons = [];\r\nnewButtons.push(<button key={1} type=\"button\" id={1}>1</button>)\r\nfor (var i=2; i<101; i++) {\r\n    newButtons.push(<button key={i} type=\"button\" id={i} disabled>{i}</button>);\r\n}\r\n\r\nclass Levels extends React.Component {\r\n    componentDidMount() {\r\n        //check cookies to see if a level has been solved\r\n        var cookies = document.cookie;\r\n        var cookieArray = cookies.split(\";\");\r\n        var solvedClues = [];\r\n        for (var cookie of cookieArray) {\r\n            solvedClues.push(parseInt(cookie));\r\n        }\r\n        for (var i=1; i<=solvedClues.length+1; i++) {\r\n            /* all buttons except the first level have been disbled; removes disabled attribute for those that have been solved\r\n            plus the one directly afterwards that has not been solved yet*/\r\n            document.getElementById(i).removeAttribute(\"disabled\"); \r\n        }\r\n\r\n        //renders the level to the page\r\n        newButtons.forEach(function (element)  {\r\n            document.getElementById(element.props.id).onclick = function () {\r\n                return ReactDOM.render(<React.StrictMode><Question questionNum={element.props.id} /></React.StrictMode>, document.getElementById('root'));\r\n            }\r\n        })\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"levels\">\r\n                <div className=\"container\">\r\n                    <div className=\"buttonQuestions\">\r\n                        <h1>Levels</h1>\r\n                        <div className=\"buttons\">\r\n                            <button type=\"button\" className=\"leftArrow\" onClick={() => document.location.reload()}>&larr;</button>\r\n                            {newButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Levels;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Question.css';\r\nimport Levels from './Levels';\r\nvar obj = require(\"./Questions.json\");\r\n\r\nclass Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // the onload value of the input text box is \"\"\r\n        this.state = {value: \"\"}\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        // simultaneously sets state as the user is typing in the text box\r\n        this.setState({value: event.target.value});\r\n    }\r\n    componentDidMount () {\r\n        // when a user clicks enter, their answer is submitted\r\n        document.getElementById(\"ans\").addEventListener(\"keyup\", function(event) {\r\n            event.preventDefault();\r\n            if (event.keyCode === 13) document.getElementById(\"ansSubmit\").click();\r\n        });\r\n    }\r\n    render() {\r\n        var nextLevelBtn = document.getElementById(\"rightArrow\");\r\n        \r\n        // get questions from Questions.json according to the props passed into <Question questionNum = {props} />\r\n        var questionNum = this.props.questionNum;\r\n        var output = [];\r\n        if (questionNum === 16) {\r\n            output.push(\r\n            <div key={1}>\r\n                <h3><span className=\"triangle\">&#9651;</span> + <span className=\"square\">&#9633;</span> = 2</h3>\r\n                <h3><span className=\"triangle\">&#9651;<sup>3</sup></span> = 216</h3>\r\n                <h3><span className=\"square\">&#9633;<sup>4</sup></span> = ?</h3>\r\n            </div>\r\n            );\r\n        }\r\n        else {\r\n            function renderQuestion() {\r\n                var getQuestion = obj[\"question\"+questionNum];\r\n                var individualClue = getQuestion.split(\"\\n\");\r\n                for (var i=0; i<individualClue.length; i++) {\r\n                    output.push(<h3 key={i}>{individualClue[i]}</h3>);\r\n                }\r\n            }\r\n            renderQuestion();\r\n        } \r\n        \r\n        // renders each individual line of the clue separated by the \\n's from the JSON\r\n        \r\n        \r\n\r\n        // when the left arrow is clilcked, render  previous level; if there is none, reload the homepage\r\n        function renderPreviousLevel() {\r\n            if (questionNum === 1) document.location.reload()\r\n            else ReactDOM.render(<React.StrictMode><Question questionNum={questionNum-1} /></React.StrictMode>, document.getElementById(\"root\"))\r\n        }\r\n\r\n        /* after the level is solved, when the right arrow is clicked, render next clue, clear the correct/incorrect text\r\n        and input value*/\r\n        function renderNewLevel() {\r\n            ReactDOM.render(<React.StrictMode><Question questionNum={questionNum+1} /></React.StrictMode>, document.getElementById(\"root\"));\r\n            document.getElementById(\"CorI\").innerHTML = \"\";\r\n            document.getElementById(\"ans\").value = \"\";\r\n            nextLevelBtn.onclick = null;\r\n            nextLevelBtn.setAttribute(\"class\", \"\");\r\n        }\r\n        return (\r\n            <div className=\"display\">\r\n\r\n                <button type=\"button\" id=\"leftArrow\" onClick={renderPreviousLevel}>&larr;</button>\r\n                <button type=\"button\" id=\"rightArrow\">&rarr;</button>\r\n                <button type=\"button\" id=\"toHome\" onClick={_ => document.location.reload()}><i className=\"material-icons\">home</i></button>\r\n                <button type=\"button\" id=\"toLevels\" onClick={_ => {\r\n                    ReactDOM.render(<React.StrictMode><Levels /></React.StrictMode>, document.getElementById(\"root\"));\r\n                }}><i className=\"material-icons\">menu</i></button>\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"question\">\r\n                        <h1>Level {questionNum}</h1>\r\n                        {output}\r\n                        <input type=\"text\" id=\"ans\" placeholder=\"Answer\" onChange={this.handleChange}></input>\r\n                        <button type=\"submit\" id=\"ansSubmit\" onClick={_ => {\r\n                            var value = this.state.value;\r\n                            var noCommaValue = \"\";\r\n\r\n                            // if a comma is present in the input, remove it and store it in noCommaValue\r\n                            if (value.includes(\",\")) {\r\n                                var splitNumber = value.split(\",\");\r\n                                for (var number of splitNumber) { noCommaValue += number; }\r\n                                noCommaValue = Number(noCommaValue);\r\n                            }\r\n                            else noCommaValue = Number(value);\r\n\r\n                            // if noCommaValue is not a number or if it's the wrong answer, prompt user to try again\r\n                            if (isNaN(noCommaValue)) document.getElementById(\"CorI\").innerHTML = \"Not a valid response! Try again.\"\r\n                            else if (noCommaValue !== obj[\"ans\"+questionNum]) {\r\n                                document.getElementById(\"CorI\").innerHTML = \"Incorrect! Try again.\";\r\n                            }\r\n                            else {\r\n                                /* add html to notify user that answer is correct, set cookie saying that the level is solved,\r\n                                make the right arrow active, */\r\n                                document.getElementById(\"CorI\").innerHTML = \"Correct! Press the \\\"space\\\" key to head to the next level.\";\r\n                                document.cookie = `${this.props.questionNum}=true`;\r\n                                nextLevelBtn.setAttribute(\"class\", \"active\");\r\n                                nextLevelBtn.onclick = function () { renderNewLevel() }\r\n                                document.body.onkeyup = function(event) {\r\n                                    event.preventDefault();\r\n                                    if (event.keyCode === 32) nextLevelBtn.click();\r\n                                };\r\n                            }\r\n                        }}>&uarr;</button>\r\n                        <p id=\"CorI\"></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Question from './Question';\r\nimport './How2Play.css';\r\n\r\nfunction How2Play() {   \r\n    return (\r\n        <div className=\"How2Play\">\r\n            <div className=\"container\">\r\n                <div className=\"play\">\r\n                    <h1>How to Play</h1>\r\n                    <p>There are 100 levels (and maybe more in the future!) to solve in this game. Each level provides mathematical\r\n                        clues that will help the player discover the correct answer to the level. For example:</p>\r\n                    <h3>2 + 4 = x</h3>\r\n                    <h3>x + 5 = ?</h3>\r\n                    <p>Using algebra, the answer, indicated by the question mark, is 11. Unfortunately, the clues won't be as \r\n                        simple as the ones in this level, but the underlying concept is quite understandable. Also, each clue \r\n                        contains different patterns that need to be applied to the rest of the clues in order to complete the \r\n                        level. Naturally, until one level is solved, the player may not move on to the next one.</p>\r\n                    <h2>Good luck and let your skills be put to the test!</h2> \r\n                    <button type=\"button\" onClick={_ => ReactDOM.render(<React.StrictMode><Question questionNum={1} /></React.StrictMode>, document.getElementById(\"root\"))}>Level 1</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default How2Play;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport How2Play from './How2Play';\nimport Levels from './Levels';\nimport Question from './Question';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\ndocument.getElementById(\"play\").onclick = function() {\n  var cookies = document.cookie;\n  if (cookies) {\n    var cookieArray = cookies.split(\";\");\n    var solvedClues = [];\n    for (var cookie of cookieArray) {\n        solvedClues.push(parseInt(cookie));\n    }\n    var lastClueSolved = solvedClues[solvedClues.length-1];\n    ReactDOM.render(<React.StrictMode><Question questionNum={lastClueSolved+1} /></React.StrictMode>, document.getElementById(\"root\"));\n  }\n  else {\n    ReactDOM.render(<React.StrictMode><How2Play /></React.StrictMode>, document.getElementById(\"root\"));\n  }\n}\n\ndocument.getElementById(\"levels\").onclick = function() {\n  ReactDOM.render(<React.StrictMode><Levels /></React.StrictMode>, document.getElementById(\"root\"));\n}\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}